
import com.socgen.itim.fft.config.ApplicationProperties;
import com.socgen.itim.fft.dto.Eligibilite;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.JobRegistry;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemStreamReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;
import org.springframework.batch.item.database.JdbcBatchItemWriter;
import org.springframework.batch.item.database.JdbcCursorItemReader;
import org.springframework.batch.item.support.ClassifierCompositeItemWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.classify.Classifier;
import org.springframework.cloud.task.configuration.EnableTask;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.sql.DataSource;

@Configuration
@EnableTask
@EnableBatchProcessing
public class BatchConfiguration {

	public static final String CREATE = "create";
	@Autowired
	private JobRegistry jobRegistry;
	
	@Autowired
	private DataSource dataSource;
	
	@Autowired
	private JobBuilderFactory jobs;
	
	@Autowired
	private StepBuilderFactory steps;

	@Autowired
	private ApplicationProperties applicationProperties;
	
	@Bean
	public Job importUserJob() {
		return jobs.get("databaseToDatabaseJob")
				.incrementer(new RunIdIncrementer())
				.start(step1())
				.build();
	}
	


	String query="With guichets_filter as (select *  " +
			"  from guichets   " +
			"  where guichet_statut in (1,3)   " +
			"  and top_sup=false),   " +
			" tiers_guichets_filter as (select *   " +
			"  from relation_tiers_guichets   " +
			"  where top_sup= false   " +
			"  and NATURE_LIEN_PP_PM_CG in ('01','05','07','04')),   " +
			" tiers_filter as (select *    " +
			"  from tiers   " +
			"  where top_sup=false   " +
			"  and natu_tiers='1'   " +
			"  and type_tiers in ('01','02','04')   " +
			"  and top_banque_prive in ('005', '009')),   " +
			" prestation_filter as ( select *    " +
			"         from prestations   " +
			"         where top_sup = false   " +
			"         and code_source='001'),   " +
			"            " +
			" detected as (select id_tiers, code_opt_facturation   " +
			"    from prestation_filter   " +
			"    where ( exists (select 1 from tiers_filter   " +
			"         where top_pp_pm = 'PP'   " +
			"         and type_tiers = '01'   " +
			"         and prestation_filter.id_tiers = tiers_filter.id_tiers   " +
			"         and exists (select 1 from tiers_guichets_filter   " +
			"           where NATURE_LIEN_PP_PM_CG='01'   " +
			"           and tiers_filter.id_tiers = tiers_guichets_filter.id_tiers   " +
			"           and code_banque||code_guichet||num_client in (select code_banque||code_guichet||num_client   " +
			"                    from guichets_filter   " +
			"                    where type_cli in ('01','21','22','23'))))   " +
			"   " +
			"   " +
			"      Or exists (select 1 from tiers_filter   " +
			"         where top_pp_pm = 'PM'   " +
			"         and type_tiers = '04'   " +
			"         and prestation_filter.id_tiers = tiers_filter.id_tiers   " +
			"         and exists (select 1 from tiers_guichets_filter   " +
			"           where NATURE_LIEN_PP_PM_CG='07'   " +
			"           and tiers_filter.id_tiers = tiers_guichets_filter.id_tiers   " +
			"           and code_banque||code_guichet||num_client in (select code_banque||code_guichet||num_client   " +
			"                   from guichets_filter   " +
			"                   where type_cli in ('02','34','35'))))                  " +
			"      Or exists (select 1 from tiers_filter   " +
			"        where top_pp_pm = 'PM'   " +
			"        and type_tiers='02'   " +
			"        and prestation_filter.id_tiers = tiers_filter.id_tiers   " +
			"        and code_banque||code_guichet||num_client in (select code_banque||code_guichet||num_client   " +
			"           from tiers_guichets_filter   " +
			"           where NATURE_LIEN_PP_PM_CG in ('05','04')   " +
			"           and code_banque||code_guichet||num_client in (select code_banque||code_guichet||num_client   " +
			"                   from guichets_filter   " +
			"                   where type_cli='08')   " +
			"           group by code_banque||code_guichet||num_client   " +
			"           having count(tiers_guichets_filter.id_tiers) = 3))   " +
			"     ))   " +
			"select id_tiers, code_opt_facturation, 'create' status   " +
			"from detected   " +
			"where not exists (select 1 from eligibilite   " +
			"     where detected.id_tiers = eligibilite.id_tiers)   " +
			"union   " +
			"select id_tiers , null , 'delete' status   " +
			"from eligibilite    " +
			"where not exists (select 1 from detected   " +
			"     where detected.id_tiers = eligibilite.id_tiers)";
	
	@Bean
	public Step step1() {
		return steps.get("databaseToDatabaseStep")
				.<Eligibilite, Eligibilite> chunk(applicationProperties.getBatchConfiguration().getChunkSize())
				.reader(reader())
				.processor(processor())
				.writer(classifierCompositeItemWriter(eligibiliteInsertWriter(),eligibiliteDeleteWriter()))
				.build();
		
		
	}
	
	
	@Bean
	public ItemStreamReader<Eligibilite> reader() {
			JdbcCursorItemReader<Eligibilite> reader = new JdbcCursorItemReader<Eligibilite>();
		reader.setDataSource(dataSource);
		reader.setFetchSize(applicationProperties.getBatchConfiguration().getChunkSize());
		reader.setSql(query);
		reader.setRowMapper(new EligibiliteRowMapper());
		return reader;
	}

	@Bean
	public ItemProcessor<Eligibilite, Eligibilite> processor() {
		return new EligibiliteItemProcessor();
	}

	@Bean
	public ItemWriter<Eligibilite> eligibiliteInsertWriter() {
		JdbcBatchItemWriter<Eligibilite> writer = new JdbcBatchItemWriter<Eligibilite>();
		writer.setItemSqlParameterSourceProvider(new BeanPropertyItemSqlParameterSourceProvider<Eligibilite>());
		
		
		writer.setSql("INSERT INTO eligibilite (id_eligibilite,id_tiers,top_cotation,top_eligibilite,top_frais_revenus,top_opp_chequier," +
				"top_surrendente,top_usage_abusif_carte,top_generis, date_creation, date_modification, cree_par, modifie_par) " +
				"VALUES (nextval('eligibilite_id_seq'),:idTiers,false, true, false, false,false,false,:topGeneris,:currentDateTime,:currentDateTime," +
				"'FFT-ELIGIBILITE-BATCH','FFT-ELIGIBILITE-BATCH')");
		writer.setDataSource(dataSource);
		return writer;
	}

	@Bean
	public ItemWriter<Eligibilite> eligibiliteDeleteWriter() {
		JdbcBatchItemWriter<Eligibilite> eligibiliteInsertWriter = new JdbcBatchItemWriter<Eligibilite>();
		eligibiliteInsertWriter.setItemSqlParameterSourceProvider(new BeanPropertyItemSqlParameterSourceProvider<Eligibilite>());

		eligibiliteInsertWriter.setSql(" delete from  eligibilite where id_tiers=:idTiers;");
		eligibiliteInsertWriter.setDataSource(dataSource);
		return eligibiliteInsertWriter;
	}

	@Bean
	public ClassifierCompositeItemWriter<Eligibilite> classifierCompositeItemWriter(
			ItemWriter< Eligibilite> eligibiliteInsertWriter,
			ItemWriter< Eligibilite> eligibiliteDeleteWriter
	) {
		ClassifierCompositeItemWriter< Eligibilite> classifierCompositeItemWriter = new ClassifierCompositeItemWriter<>();
		classifierCompositeItemWriter.setClassifier(new Classifier<Eligibilite, ItemWriter<? super Eligibilite>>() {
			@Override
			public ItemWriter<? super  Eligibilite> classify( Eligibilite eligibilite) {
				if (CREATE.equalsIgnoreCase(eligibilite.getStatus())) {
					return eligibiliteInsertWriter;
				} else {
					return eligibiliteDeleteWriter;
				}
			}
		});
		return classifierCompositeItemWriter;
	}

}
